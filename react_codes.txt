1. React HoC simple example
2. React HOC complex example
3. Ref
4. useRef


0. Higher Order Component best example:

import React from 'react'
import ReactDOM from 'react-dom'

function Paragraph(props) {
  return <div style={{backgroundColor: props.color}}>{props.text}</div>
}

function Form(props) {
  return (
    <>
     <div style={{backgroundColor: props.color}}>
      <input type="text"></input>
      <input type="submit" />
      </div>
    </>
  )
}

const withBakground = (WrappedComponent, color) => {
  return () => {
    return (
      <>
        <div>
          <WrappedComponent text="Hey!!" color={color}/>
        </div>
      </>
    )
  }
}

const EnhancedParagraph = withBakground(Paragraph, 'cyan')
const EnhancedForm = withBakground(Form, 'magenta')

function App() {
  return (
    <>
      <EnhancedParagraph/>
      <br />
      <EnhancedForm />
    </>
  )
}

ReactDOM.render(<App />, document.getElementById('root'))

----------------------------------------------------------------
1. React HoC simple example:
function Inner(props) {
 return <div>Inner</div>
}

function Returner(Wrapper){
  return function(props){
    return (
      <Wrapper />
      )
  }
}

let Outer = Returner(Inner)

ReactDOM.render(<Outer />,document.getElementById("root"))
---------------------------------------------------------------------------------------
2. React HOC complex example:

// Wrapped component, that will be passed as an argument to the HOC 
const Button = (props) => (
  <button onClick={props.increase}>Btn clicks count: {props.counter}</button>
)

// Yet another wrapped component, that will be passed as an argument to the HOC 
const Label = (props) => (
  <label onMouseOut={props.increase}>Mouse out count: {props.counter}</label>
)


// Higher Order Component
const Hoc = (WrappedComponent) => {
  return function() {
    const [counter, setCounter] = React.useState(0);
    
    // This is the enhancement - adding increase method to ANY WrappedComponent
    // that will be passed to the Hoc function
   function increaseCounter(){
      setCounter(counter+1)
    }
    

      return (
        // Better to bind method here than in constructor as bind creates a new function, thus consumes memory.
        <WrappedComponent counter={counter} increase={() => this.increaseCounter()} />
      )
    }
  }
}

const EnhancedButton = Hoc(Button)
const EnhancedLabel = Hoc(Label)

// Parent component to wrap both enhanced components for rendering.
const Container = () => (
  <div>
    <EnhancedButton/>
    <br/>
    <EnhancedLabel />
  </div>
)

ReactDOM.render(
  <Container/>, 
  document.getElementById('root')
)


---------------------------------------------------------------------------------------
2.b. HOC

import React from 'https://esm.sh/react@18.2.0'
import ReactDOM from 'https://esm.sh/react-dom@18.2.0'


const cityChanger = (LowerComp) =>{
  
const [place, setPlace] = React.useState("");  
  
const [check, setCheck] = React.useState(false);
  
  const handleChennai = () =>{
    setPlace("Chennai")
    setCheck(false)
  }
  
  const handleBombay = () =>{
    setPlace("Bombay")
    setCheck(true)
  }
  
  return(
    <div>
    <button onClick={handleChennai}>Chennai</button>
    <button onClick={handleBombay}>Bombay</button>
      
      {check?<LowerComp place= {place} checkIfBombay={true}/>:<LowerComp place= {place} checkIfBombay={false}/>}
      </div>
  )
}


const LowerComp = (props) =>{
  console.log(props)
  return(
    <div>
  <h1>Hi {props.place}!</h1>
      {props.checkIfBombay?<h2>Bombay is Nostalgic</h2>:<h2></h2>}
      </div>
  )
}

LowerComp.defaultProps = {
  checkIfBombay : false,
  place : "India",
  message : "Bombay is Nostalgic"
}

function HelloWorld(){
  return ( 
    <div>
    <h1>Hello, Worlds!</h1>
    {cityChanger(LowerComp)}
    </div>
         )
}

ReactDOM.render(<HelloWorld />, document.getElementById('app'))

---------------------------------------------------------------------------------------
3. Ref:

class App extends React.Component{
  state = {
    name : "Nate"
  }
  handleSubmit = ()=>{
    this.setState({name : this.refs.myref.value})
  }

  render(){
    return(
      <>
      <h1>Hello!</h1>
      <input type="text" ref="myref"/>
      <button type="button" onClick={()=>this.handleSubmit()}>
        Submit
      </button>
      {this.state.name}
      </>
    )
  }
}

const rootElement = document.getElementById("root");
ReactDOM.render(<App />, rootElement);
---------------------------------------------------------------------------------------
4. useRef

function App() {
  let [name, setName] = useState("Nate");

  let nameRef = useRef();

  const submitButton = () => {
    setName(nameRef.current.value);
  };

  return (
    <div className="App">
      <p>{name}</p>

      <div>
        <input ref={nameRef} type="text" />
        <button type="button" onClick={submitButton}>
          Submit
        </button>
      </div>
    </div>
  );
}

const rootElement = document.getElementById("root");
ReactDOM.render(<App />, rootElement);
---------------------------------------------------------------------------------------

5. Using previousState in React Class Based component to update state:

import React from "react";

class Counter extends React.Component {
  state = {
    like: 0
  };

  handleLikeChange = () => {
    this.setState((prevState) => {
      return { like: prevState.like + 1 };
    });
  };

  render() {
    return <div onClick={this.handleLikeChange}>xxxxxxxx{this.state.like}</div>;
  }
}

export default Counter;
---------------------------------------------------------------------------------------


6. Error handling in functional components:

import * as React from 'react'
import ReactDOM from 'react-dom'

function ErrorHandler({error}) {
  return (
    <div role="alert">
      <p>An error occurred:</p>
      <pre>{error.message}</pre>
    </div>
  )
}

function Country({capital}) {
  try {
    return <div>Hello, visit {capital.toUpperCase()}</div>
  } catch (error) {
    return <ErrorHandler error={error} />
  }
}

function City(props) {
  try {
    return <div>Hello, visit {props.name.toUpperCase()}</div>
  } catch (error) {
    return <ErrorHandler error={error} />
  }
}

function App() {
  return (
    <div>
      <Country />
      <City name="Bombay!"/>
    </div>
  )
}

ReactDOM.render(<App />, document.getElementById('root'))

---------------------------------------------------------------------------------------

7. Error Boundary in class Component:

import React, { useState } from "react";

function FallBack() {
  return (
    <>
      <h3>Error.</h3>
      <h6>Reason : Count is greater than 4</h6>
    </>
  );
}

class ErrorBoundary extends React.Component {
  state = {
    hasError: false
  };

  static getDerivedStateFromError(error) {
    // Update state so the next render will show the fallback UI.
    return { hasError: true };
  }

  componentDidCatch(error, errorInfo) {
    // You can also log the error to an error reporting service
    console.log(error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      // You can render any custom fallback UI
      return <FallBack />;
    }
    return this.props.children;
  }
}

function Increment() {
  const [state, setState] = useState(0);
  const handleClick = () => {
    setState(state + 1);
  };

  if (state > 4) {
    throw new Error("xx");
  }

  return (
    <div>
      <button onClick={handleClick}>increment</button>
      {state}

      <p />
    </div>
  );
}

function App() {
  return (
    <>
      <h1>Hello World</h1>
      <ErrorBoundary>
        <Increment />
      </ErrorBoundary>
    </>
  );
}

export default App;


-----------------------------------------------------------
8. fetch with react:

import React, { useState, useEffect } from "react";
import ReactDOM from "react-dom";
import "./styles.css";

function App() {
  const [books, setBooks] = useState(null);

  useEffect(() => {
    // fetch("https://jsonplaceholder.typicode.com/todos/1")
    // .then(res=>res.json())
    // .then(res=>setBooks(res))

    async function getData() {
      let result = await fetch("https://jsonplaceholder.typicode.com/todos/1");
      let json = await result.json();
      setBooks(json);
    }
    getData();
  }, []);

  return (
    <div className="App">
      {books && (
        <div className="books">
          {books.userId}
          {books.id}
          {books.title}
          {String(books.completed)}
        </div>
      )}
    </div>
  );
}

const rootElement = document.getElementById("root");
ReactDOM.render(<App />, rootElement);



----------------------------------------------------------
9. React Router

import React from "react";
import { render } from "react-dom";
import { BrowserRouter, Switch, Route, Redirect, Link } from "react-router-dom";


function Home() {
  return <h1>Home</h1>;
}
function About() {
  return <h1>About</h1>;
}
function Contacts() {
  return <h1>Contacts</h1>;
}

const App = () => (
  <BrowserRouter>
    <Link to="/">Home</Link>
    <br />
    <Link to="/about">About</Link>
    <br />
    <Link to="/contacts">Contacts</Link>
    <Switch>
      <Route path="/" component = {Home} exact />
      <Route path="/about" component = {About}  exact />
      <Route path="/contacts" component = {Contacts}  exact />
      <Redirect to="/" />
    </Switch>
  </BrowserRouter>
);

render(<App />, document.getElementById("root"));
