useState -- completed
useEffect -- completed
useContext
useLayoutEffect -- completed
useReducer -- completed
useCallback -- completed
useMemo -- completed
useRef -- completed



3. useReducer:

import React from 'https://esm.sh/react@18.2.0'
import ReactDOM from 'https://esm.sh/react-dom@18.2.0'

 
 
function App(){
  const [states, setStates] = React.useState('A')
  const reducer = (state, action) =>{
    switch (action){
      case 'A': {console.log("action");setStates('B'); return 0}
      case 'B': {console.log("action");setStates('A'); return 0};
      default : throw new Error("what's going on?")
    }  
 }
  
  const [state, dispatch] = React.useReducer(reducer, 'B')
 
  
  return(
    <div>
    <h1>Hello {states}</h1>
    <button onClick={()=>dispatch(states)}>{states}</button>
    </div>
      )
}

ReactDOM.render(<App />, document.getElementById('app'));


4. useMemo:

import React, {useState} from 'react';

function App() {
const [number, setNumber] = useState(0)
// Using useMemo
const squaredNum = useMemo(()=> {
	return squareNum(number);
}, [number])
const [counter, setCounter] = useState(0);

// Change the state to the input
const onChangeHandler = (e) => {
	setNumber(e.target.value);
}

// Increases the counter by 1
const counterHander = () => {
	setCounter(counter + 1);
}
return (
	<div className="App">
	<h1>Welcome to Geeksforgeeks</h1>
	<input type="number" placeholder="Enter a number"
		value={number} onChange={onChangeHandler}>
	</input>
	
	<div>OUTPUT: {squaredNum}</div>
	<button onClick= {counterHander}>Counter ++</button>
	<div>Counter : {counter}</div>
	</div>
);
}

// function to square the value
function squareNum(number){
console.log("Squaring will be done!");
return Math.pow(number, 2);
}

export default App;


5. useRef (to keep track of previous value)

import React, { useState, useEffect } from "react";
import { useRef } from 'react';

function App() {
 const [value, setValue] = useState('')
 const numberOfTimesRerendered = useRef(0)
 const prevValue = useRef('')
 useEffect(()=>{
  numberOfTimesRerendered.current=numberOfTimesRerendered.current+1
 
})

useEffect(()=>{
  prevValue.current=value
},[value])

  return (<>
 <br />
 <input onChange={e=>setValue(e.target.value)}/>
 <div> Current value : {value}</div>
 <div> Previous value : {prevValue.current}</div>
 <div>Rendered these many  times : {numberOfTimesRerendered.current}</div>
</>)
}

export default App;




6 The useCallback and useMemo Hooks are similar. The main difference is that useMemo returns a memoized value and useCallback returns a memoized function.


7. React.Memo

import React from "react";
import ReactDOM from "react-dom";

import "./styles.css";

function UserInfoNormal(props) {
  const { name, avatar, memo } = props;
  if(memo)
    console.log("NORMAL COMPONENT RENDERING");
    else
    console.log("MEMOIZED COMPONENT RENDERING");

  return (
    <div className="user-info">
      <img src={avatar} alt={`${name}'s avatar`} />
      <span>{name}</span>
    </div>
  );
}

const UserInfoMemo = React.memo(UserInfoNormal);

class App extends React.Component {
  
  state = {
    search: ""
  };

  componentDidUpdate(){
    console.log("rendered...")
  }

  render() {
    return (
      <div className="App">
        <h1 />
        <div>
          <input
            type="text"
            onChange={e => this.setState({ search: e.target.value })}
            value={this.state.search}
            placeholder="Search"
          />
        </div>
        <UserInfoNormal
          name="Normal User"
          avatar="https://via.placeholder.com/75x75"
          memo={true}
        />
        <UserInfoMemo
          name="Memo Users  "
          avatar="https://via.placeholder.com/75x75"
          memo={false}
        />
      </div>
    );
  }
}

const rootElement = document.getElementById("root");
ReactDOM.render(<App />, rootElement);



