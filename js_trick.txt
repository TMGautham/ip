What's the output:
1. scope:

(function(){
  var a = b = 3;
})();

console.log("a defined? " + (typeof a !== 'undefined'));
console.log("b defined? " + (typeof b !== 'undefined'));

Output:

a defined? false
b defined? true

this is becuase L var = a =b =3 is shorthand for

b = 3;
var a = b;
b is a global variable since it has no 'var'. Hence it is accessible outside while a is not.


2. checking if it's an object

var bar = null;
console.log(typeof bar === "object");

null is also an object. Hence the output is true.
So, best way to do this check is: 
console.log((bar !== null) && (typeof bar === "object"));

3. this binding

var myObject = {
    foo: "bar",
    func: function() {
        var self = this;
        console.log("outer func:  this.foo = " + this.foo);
        console.log("outer func:  self.foo = " + self.foo);
        (function() {
            console.log("inner func:  this.foo = " + this.foo);
            console.log("inner func:  self.foo = " + self.foo);
        }());
    }
};
myObject.func(); 

Output: 

outer func:  this.foo = bar   
outer func:  self.foo = bar
inner func:  this.foo = undefined  //this is because inner this does not have access to the outer myObject object. Hence it returns windows object and tries to search foo property of window object.
inner func:  self.foo = bar

4. return statement

function foo2()
{
  return
  {
      bar: "hello"
  };
}

output is undefined. This because the line 3 has 'return' alone and nothing else. Hence javascript automatically puts a semicolon and the line 3 is read as 'return;'.
Hence the next line 
  {
      bar: "hello"
  };
 is not executed.

5. settimeout:

(function() {
    console.log(1); 
    setTimeout(function(){console.log(2)}, 1000); 
    setTimeout(function(){console.log(3)}, 0); 
    console.log(4);
})();

Output:
1
4
3
2

6. String & mutability:

var arr1 = "john".split('');
var arr2 = arr1.reverse();
var arr3 = "jones".split('');
arr2.push(arr3);
console.log("array 1: length=" + arr1.length + " last=" + arr1.slice(-1));
console.log("array 2: length=" + arr2.length + " last=" + arr2.slice(-1));

The logged output will be:

"array 1: length=5 last=j,o,n,e,s"
"array 2: length=5 last=j,o,n,e,s"

7. String and Numbers:

console.log(1 +  "2" + "2");
console.log(1 +  +"2" + "2");
console.log(1 +  -"1" + "2");
console.log(+"1" +  "1" + "2");
console.log( "A" - "B" + "2");
console.log( "A" - "B" + 2);

Output:
"122"
"32" // 1 + + "2" => +"2", here + is unary operator hence converts 2 to number, hence it's 1+2+"2" => 32
"02"
"112"
"NaN2"	//same as previous comment. - is unary. Hence it tries to convert B to number which is not a number. Hence A-B is NaN
NaN

8. AND and OR operator:

console.log("0 || 1 = "+(0 || 1));
console.log("1 || 2 = "+(1 || 2));
console.log("0 && 1 = "+(0 && 1));
console.log("1 && 2 = "+(1 && 2));

output:
0 || 1 = 1
1 || 2 = 1
0 && 1 = 0
1 && 2 = 2

9. Object stringification

var a={},
    b={key:'b'},
    c={key:'c'};

a[b]=123;
a[c]=456;

console.log(a[b]);

The output of this code will be 456 (not 123).

The reason for this is as follows: When setting an object property, JavaScript will implicitly stringify the parameter value. In this case, since b and c are both objects, they will both be converted to "[object Object]". As a result, a[b] anda[c] are both equivalent to a["[object Object]"]


10. Promise :

function prom(){
    return new Promise((res,rej)=>{
       setTimeout(()=>res("1"),0);
    });
}

(async function asyncCall() {
    console.log('Start');
    var result = await prom();
    console.log(result);
    console.log('End');
})();

Output:
Start
Promise {<pending>}
1
End


11. Promise:

function prom(){
    return new Promise((res,rej)=>{
       res(setTimeout(()=>{console.log("1")},0));
    });
}

(async function asyncCall() {
    console.log('Start');
    var result = await prom();
    console.log(result);
    console.log('End');
})();

Output:
Start
End
Promise {<pending>}
1

12. Promise:

function prom(){
    return new Promise((res,rej)=>{
       res(1);
    });
}

(async function asyncCall() {
    console.log('Start');
    var result = await prom();
    console.log(result);
    console.log('End');
})();

Output:
Start
1
End
Promise {<fulfilled>: undefined}

13. call vs bind

var person = {  
  name: "James Smith",
  hello: function(thing) {
    console.log(this.name + " says hello " + thing);
  }
}

person.hello("world");  // output: "James Smith says hello world"
var helloFunc = person.hello.bind({ name: "Jim Smith" });
helloFunc("world");  // output: Jim Smith says hello world"

14. apply

const person = {
  fullName: function(city, country) {
    return this.firstName + " " + this.lastName + "," + city + "," + country;
  }
}

const person1 = {
  firstName:"John",
  lastName: "Doe"
}

person.fullName.apply(person1, ["Oslo", "Norway"]);

Output : 'John Doe,Oslo,Norway'


15. js array of objects & arrays
a. How will remove remove object with duplicate fields in an array of objects:

let books = [
        { title: "C++", author: "Bjarne" },
        { title: "Java", author: "James" },
        { title: "Python", author: "Guido" },
        { title: "Java", author: "James" },  //remove this duplicate
    ];


sol:

let arr = [] //array of strings to store title
for(i in books){
    if(arr.indexOf(books[i].title)==-1){
        arr.push(books[i].title)
    }
}

let finalArray = [] //to store non-duplicates

for(i in arr){
    let book = books.find(x=>x.title==arr[i])
    finalArray.push(book)
}

console.log(finalArray)

b. How to change value of object which is inside an array using JavaScript?

books = [
        { title: "C++", author: "Bjarne" },
        { title: "Java", author: "James" },
        { title: "Python", author: "Guido" },
        { title: "Java", author: "Jamecs" },
    ];
//update author of python to mosh

//find the index of the object first
//then update the record in that index
let index = books.findIndex(book=>book.title=='Python')
books[index].author='Mosh'

c. answer questions here
https://backbencher.dev/javascript-quiz-arrays


d. How will you sort this array in ascending order?
var nums = [1, 20, 3, 450, 53]

answer
nums.sort(
    function(a,b){
        if(a>b) return 1
        if(a<b) return -1
    }
)

e. How will you sort this array in alphabetical order based on title?

let books = [
        { title: "C++", author: "Bjarne" },
        { title: "Java", author: "James" },
        { title: "Python", author: "Guido" },
        { title: "Java", author: "Saini" },
    ];

answer
books.sort(function(a,b){
    if(a.title>b.title) return 1
    if(a.title<b.title) return -1
})

------------------------
16. Array questions:

a. How do you get an array of duplicate elements in an array?

const arry = [1, 2, 1, 3, 4, 3, 5];

arry.filter((element, index)=>{
   return arry.indexOf(element) !== index
})


b. How do you get a new array removing duplicate values?

let a = [1,1,2,2,3,4,5,5]
let result = []
for(let i=0;i<a.length;i++){
    if(!result.includes(a[i])){
        result.push(a[i])
    }
}
console.log(result)

Alternate solution:
let result = []
for(let i of a){
    if(!result.includes(i)){
        result.push(i)
    }
}

c. How do you filter and get the elements that appear more than once in a list (get list of duplicates)?

let a = [1,1,1,2]
a.filter(
    (element,index)=>{
        //console.log(a.slice(0,index)+" E : "+element+" "+ a.slice(0,index).includes(element))
        return a.indexOf(element) !== a.lastIndexOf(element) && !a.slice(0,index).includes(element)
    }
)


d. How do you filter and get the elements that appear only once in a list (get of elements which do no have duplicates)?

let a = [1,1,1,2,3,4,5,5,6,7]
a.filter(
    (element,index)=>{
        console.log(a.slice(0,index)+" E : "+element+" "+ a.slice(0,index).includes(element))
        return a.indexOf(element) === a.lastIndexOf(element) && !a.slice(0,index).includes(element)
    }
)

d. Exract the list of all books under the person array.

let person = [
    {
        name : 'Gautham',
        books : ['The Da Vinci Code']
    },
     {
        name : 'Adhithya',
        books : ['Fatal Cure', 'Airport']
     },
     {
        name : 'Ashok',
        books : ['Timescape']
     }
]

person.reduce(
    (prev,curr)=>{
        return [...prev, ...curr.books]
    },[]
)

e. Get how many times an element occurs in a list?

let a = [1,1,1,2,3,4,5,5,6,7]
a.filter(x=>x==1).length


f. How to sort an array of objects based on one of its object's properties.

let person = [
    {
        name : 'Gautham',
        books : ['The Da Vinci Code']
    },
     {
        name : 'Adhithya',
        books : ['Fatal Cure', 'Airport']
     },
     {
        name : 'Ashok',
        books : ['Timescape']
     }
]

person.sort((p1,p2)=>p1.name>p2.name?1:-1)

g. How to sort an array of objects based on more than one of its object's properties.

let arrOfObj = [
    {name : 'Gautham', age : 29},
    {name : 'Gautham', age : 27},
    {name : 'Venkat', age : 32},
    {name : 'Vaibhavi', age : 33},
    {name : 'Vivek', age : 22},
    {name : 'Gautham',age :30}
]

arrOfObj.sort(
    (person1, person2)=>{
        return person1.name.localeCompare(person2.name) || person1.age - person2.age
    }
)


h. How to remove duplicates in an array?

	1) Remove duplicates from an array using a Set

	let chars = ['A', 'B', 'A', 'C', 'B'];
	let uniqueChars = [...new Set(chars)];
	// let uniqueChars = Array.from(new Set(chars));
	console.log(uniqueChars);


	2) Remove duplicates from an array using indexOf() and filter() methods

	let chars = ['A', 'B', 'A', 'C', 'B'];

	let dupChars = chars.filter((c, index) => {
    		return chars.indexOf(c) !== index;
	});

	console.log(dupChars);


	3) Remove duplicates from an array using forEach() and include()

	chars.forEach((char)=>{
    		if(!uniqueChars.includes(char)){
    	    		uniqueChars.push(char) 
    		}
	})

	4) Remove duplicates from an array using reduce() Method

	let chars = ['A', 'B', 'A', 'C', 'B','C','C','D','D','E'];

	chars.reduce((accumulator,current)=>{
    		if(!accumulator.includes(current)){
        		accumulator.push(current)
       		}
    		return accumulator
	},[])

	5) Remove duplicates from an array using for loop

	let chars = ['A', 'B', 'A', 'C', 'B','C','C','D','D','E'];

	function removeDuplicates(arr) {
    		let unique = [];
    		for (i = 0; i < arr.length; i++) {
       			if (unique.indexOf(arr[i]) === -1) {
            			unique.push(arr[i]);
       			}
    		}
    		return unique;
	}
	console.log(removeDuplicates(chars));

	

	
